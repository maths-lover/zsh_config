#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Suraj Pal Singh <dev.suraj.pal@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# below line is so that starship theme launches properly
setopt prompt_subst interactive_comments

# disable any beeps
setopt no_beep

# Customize to your needs...
# set pywal colorscheme by default
#cat ~/.cache/wal/sequences

[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

# pac-log function shows upto n most recently installed or removed packages in arch linux or arch based distros
function pac-log {
    # Usage: pac-log [n=20]
    #    show persisting installs/removes in last n lines of pacman.log (install X...remove X pairs and the converse are filtered out)
    {
        if [[ -e /var/log/pacman.log.1 ]]; then
            cat /var/log/pacman.log.1
        elif [[ -e /var/log/pacman.log.1.gz ]]; then
            zcat /var/log/pacman.log.1.gz
        fi
        cat /var/log/pacman.log
    } \
    | grep -E '] installed|] removed' | tail -n "${1-20}" \
    | python3 <(cat << EOF
import re, sys

pkgre = re.compile(r".* (installed|removed) ([^ ]*) .*")

lines = []
hist = {
    "installed": {},
    "removed": {},
}
otheract = {
    "installed": "removed",
    "removed": "installed",
}
li = 0

for log in sys.stdin:
    m = pkgre.match(log)
    if m:
        action, pkg = m.groups()
        hist[action].setdefault(pkg, []).append(li)
        lines.append((li, action, pkg, log[:-1]))
        li += 1

for li, action, pkg, line in lines:
    if li == hist[action][pkg][-1] and li > hist[otheract[action]].get(pkg, [-1])[0]:
        print(f"{line}")
EOF
)

}

# thefuck to auto correct the commands
should_use=$(echo "$USE_THEFUCK" | tr '[:upper:]' '[:lower:]')
if [ "$should_use" = "true" ] || [ "$should_use" = "yes" ]; then
    eval $(thefuck --alias)
fi

# zoxide (better cd)
if command -v "zoxide" > /dev/null 2>&1; then
    eval "$(zoxide init zsh)"
else
    echo "zoxide not found" || return 1
fi

# setup fzf
if command -v "fzf" > /dev/null 2>&1; then
    # PATH should be setup in `$ZDOTDIR/.zprofile`
    eval "$(fzf --zsh)"
    # source ~/.fzf.zsh || return 1
    source $FZF_GIT_INSTALL_DIR/fzf-git.sh
else
    echo "fzf not installed" || return 1
fi

# Ask user to install fd (better find)
if command -v "fd" > /dev/null 2>&1; then
    export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
    export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
    export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

    _fzf_compgen_path() {
      fd --hidden --exclude .git . "$1"
    }

    _fzf_compgen_dir() {
      fd --type=d --hidden --exclude .git . "$1"
    }
else
    echo "fd not installed, please install it" || return 1
fi

# Ask user to install bat (cat with wings) and eza (better ls)
if command -v "bat" > /dev/null 2>&1 || command -v "batcat" > /dev/null 2>&1; then
    export FZF_CTRL_T_OPTS="--preview 'bat -n --color=always --line-range :500 {}'"
else
    echo "bat (cat clone with wings) not found, please install it" || return 1
fi
if command -v "eza" > /dev/null 2>&1; then
    export FZF_ALT_C_OPTS="--preview 'eza --tree --color=always --icons {} | head -200'"
else
    echo "eza not found, please install it" || return 1
fi

_fzf_comprun() {
    local command=$1
    shift

    case "$command" in
        cd) fzf --preview 'eza --tree --color=always --icons {} | head -200' "$@" ;;
        export|unset) fzf --preview "eval 'echo \$' {}" "$@" ;;
        ssh) fzf --preview 'dig {}' "$@" ;;
        *) fzf --preview 'bat -n --color=always --line-range :500 {}' "$@" ;;
    esac
}

# source custom aliases
source "${ZDOTDIR:-$HOME}/.alias.zsh"
